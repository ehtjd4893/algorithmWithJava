import java.util.Set;
import java.util.HashSet;

// 어제 풀었던 DFS를 이용해서 문제를 풀어보았다.
// 시간초과로 문제 제출 자체가 안 된다.
// 몇개는 오류가 뜨기도 한다.
// 몇개는 통과되기도 한다
// DFS문제가 나올 때마다 이런 방법을 대입할 수 있게 노력해야겠다

class Solution {
    int cnt_nums = 0;
    int total = 0;
    Set<Integer> set = new HashSet<>();
    
    public int solution(int[] nums) {
        
        boolean[] visited = new boolean[nums.length];
        
        dfs(visited, nums);

        return set.size();
    }
    
    public void dfs(boolean[] visited, int[] nums) {
        for (int i = 0; i < nums.length; i++) {
            if (!visited[i]) {
                if(cnt_nums == 3) {
                    if (isPrime(total)) {
                        set.add(total);
                        return;
                    }
                }
                visited[i] = true;
                cnt_nums++;
                total += nums[i];
                dfs(visited, nums);
                visited[i] = false;
                total -= nums[i];
                cnt_nums--;
            }
        }
        return;
    } 
    
    public boolean isPrime(int total) {
        int cnt = 0;
        for (int i = 2; i < total/2; i++) {
            if (total % i == 0){ 
                cnt++;
            }
        }
        
        // System.out.println("total: " + total + " is prime? " + (cnt == 0) );
        
        return cnt == 0;
    }      
}